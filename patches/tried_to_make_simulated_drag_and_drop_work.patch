Index: scomm/src/test/scala/edu/zsd/scomm/useractions/RefreshUserActions.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/useractions/RefreshUserActions.scala	(revision )
+++ scomm/src/test/scala/edu/zsd/scomm/useractions/RefreshUserActions.scala	(revision )
@@ -0,0 +1,12 @@
+package edu.zsd.scomm.useractions
+
+import edu.zsd.festlogging.GUITestBean
+
+@GUITestBean
+class RefreshUserActions {
+
+  def apply() {
+
+  }
+
+}
Index: scomm/src/test/scala/edu/zsd/scomm/adapters/CopyAdapter.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/adapters/CopyAdapter.scala	(revision )
+++ scomm/src/test/scala/edu/zsd/scomm/adapters/CopyAdapter.scala	(revision )
@@ -0,0 +1,52 @@
+package edu.zsd.scomm.adapters
+
+import edu.zsd.festlogging.{GUITestAction, GUITestBean}
+import org.fest.swing.fixture.{JPanelFixture, JButtonFixture}
+import edu.zsd.scomm.FESTTest._
+import org.fest.swing.exception.ComponentLookupException
+import org.fest.swing.timing.{Condition, Pause}
+
+@GUITestBean
+class CopyAdapter extends CopyMovePanelAdapter {
+
+  private val copyButton = new JButtonFixture(robot, "copyButton")
+
+  def requirePanelVisible(): Unit = findPanel.requireVisible()
+
+  def requirePanelNotVisible(): Unit = {
+    try {
+      findPanel.requireNotVisible()
+    } catch {
+      case e: ComponentLookupException => // not finding the component is okay
+    }
+  }
+
+  def waitForPanelToDisappear(): Unit = {
+    Pause.pause(new Condition("wait for copy panel to disappear") {
+      override def test(): Boolean = try {
+        findPanel
+        false
+      } catch {
+        case e: ComponentLookupException => true
+      }
+    })
+  }
+
+  @GUITestAction
+  def clickCopy(): Unit = copyButton.click()
+
+  @GUITestAction
+  def clickOkButton(): Unit = components.okButton.click()
+
+  @GUITestAction
+  def clickCancelButton(): Unit = components.cancelButton.click()
+
+  def requirePrompt(prompt: String): Unit = components.prompt.requireText(prompt)
+
+  def requireDestination(folderName: String): Unit = components.destination.requireText(folderName)
+
+  @GUITestAction
+  def enterDestination(folderName: String): Unit = components.destination.setText(folderName)
+
+  private def findPanel = new JPanelFixture(robot, "copyPanel")
+}
Index: scomm/src/test/scala/edu/zsd/scomm/adapters/CopyMovePanelAdapter.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/adapters/CopyMovePanelAdapter.scala	(revision )
+++ scomm/src/test/scala/edu/zsd/scomm/adapters/CopyMovePanelAdapter.scala	(revision )
@@ -0,0 +1,18 @@
+package edu.zsd.scomm.adapters
+
+import edu.zsd.festlogging.GUITestBean
+import org.fest.swing.fixture.{JTextComponentFixture, JLabelFixture, JButtonFixture}
+import edu.zsd.scomm.FESTTest._
+
+@GUITestBean
+class CopyMovePanelAdapter {
+
+  protected lazy val components = new {
+    val prompt = new JLabelFixture(robot, "copyMovePanel.prompt")
+    val destination = new JTextComponentFixture(robot, "copyMovePanel.destination")
+    val okButton = new JButtonFixture(robot, "copyMovePanel.ok")
+    val cancelButton = new JButtonFixture(robot, "copyMovePanel.cancel")
+  }
+
+
+}
Index: scomm/src/test/scala/edu/zsd/scomm/useractions/DirectoriesPaneUserActions.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/useractions/DirectoriesPaneUserActions.scala	(revision )
+++ scomm/src/test/scala/edu/zsd/scomm/useractions/DirectoriesPaneUserActions.scala	(revision )
@@ -0,0 +1,15 @@
+package edu.zsd.scomm.useractions
+
+import edu.zsd.festlogging.GUITestBean
+import edu.zsd.scomm.adapters.DirectoriesPaneAdapter
+
+@GUITestBean
+class DirectoriesPaneUserActions {
+
+  protected[useractions] val directoriesPaneAdapter = new DirectoriesPaneAdapter
+
+  val left = new DirectoryListUserActions(directoriesPaneAdapter.left)
+  val right = new DirectoryListUserActions(directoriesPaneAdapter.right)
+  val directoryLists = Seq(left, right)
+
+}
Index: fest-logging/src/main/scala/edu/zsd/festlogging/dnd/SimulatedDndCTCToolkit.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- fest-logging/src/main/scala/edu/zsd/festlogging/dnd/SimulatedDndCTCToolkit.scala	(revision )
+++ fest-logging/src/main/scala/edu/zsd/festlogging/dnd/SimulatedDndCTCToolkit.scala	(revision )
@@ -0,0 +1,36 @@
+package edu.zsd.festlogging.dnd
+
+import net.java.openjdk.cacio.ctc.CTCToolkit
+import java.awt.dnd.peer.DragSourceContextPeer
+import java.awt.dnd.{DragGestureEvent, DragGestureListener, DragSource, MouseDragGestureRecognizer}
+import java.awt.Component
+import java.lang.reflect.Constructor
+
+class SimulatedDndCTCToolkit extends CTCToolkit {
+
+  setDesktopProperty("DnD.Autoscroll.initialDelay", 100)
+  setDesktopProperty("DnD.Autoscroll.interval", 100)
+
+  override def createDragSourceContextPeer(dge: DragGestureEvent): DragSourceContextPeer = {
+    new SimulatedDnD.MyDragSourceContextPeer
+  }
+
+  override def createDragGestureRecognizer[T <: AnyRef](abstractRecognizerClass: Class[T], ds: DragSource, c: Component, srcActions: Int, dgl: DragGestureListener): T = {
+    if (abstractRecognizerClass eq classOf[MouseDragGestureRecognizer]) {
+      try {
+        val wMouseDragGestureRecognizerClass: Class[_] = Class.forName("sun.awt.windows.WMouseDragGestureRecognizer")
+        val constructor: Constructor[_] = wMouseDragGestureRecognizerClass.getDeclaredConstructor(classOf[DragSource], classOf[Component], classOf[Int], classOf[DragGestureListener])
+        constructor.setAccessible(true)
+        constructor.newInstance(ds, c, new Integer(srcActions), dgl).asInstanceOf[T]
+      }
+      catch {
+        case e: Any =>
+          throw new RuntimeException(e)
+      }
+    }
+    else {
+      null.asInstanceOf[T]
+    }
+  }
+}
+
Index: fest-logging/src/main/scala/edu/zsd/festlogging/dnd/SimulatedDnD.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- fest-logging/src/main/scala/edu/zsd/festlogging/dnd/SimulatedDnD.java	(revision )
+++ fest-logging/src/main/scala/edu/zsd/festlogging/dnd/SimulatedDnD.java	(revision )
@@ -0,0 +1,123 @@
+package edu.zsd.festlogging.dnd;
+
+
+import org.fest.swing.core.Robot;
+import org.fest.swing.driver.JTreeDriver;
+import org.fest.swing.fixture.JTreeFixture;
+import sun.awt.dnd.SunDragSourceContextPeer;
+
+import javax.swing.JComponent;
+import javax.swing.JTree;
+import javax.swing.SwingUtilities;
+import javax.swing.TransferHandler;
+import java.awt.Cursor;
+import java.awt.Image;
+import java.awt.Point;
+import java.awt.datatransfer.Transferable;
+import java.awt.dnd.DnDConstants;
+import java.awt.dnd.DragSourceContext;
+import java.awt.dnd.DropTarget;
+import java.awt.dnd.DropTargetContext;
+import java.awt.dnd.DropTargetDragEvent;
+import java.awt.dnd.DropTargetDropEvent;
+import java.awt.dnd.InvalidDnDOperationException;
+import java.awt.dnd.peer.DragSourceContextPeer;
+import java.awt.event.InputEvent;
+import java.awt.event.MouseEvent;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class SimulatedDnD {
+
+    public static volatile Transferable transferable;
+
+    public static boolean enabled = false;
+
+    public static void simulateDrag(final JComponent sourceComponent, Point sourcePoint) {
+        if (transferable != null) {
+            throw new IllegalStateException("Ongoing drag!");
+        }
+
+        MouseEvent e = new MouseEvent(sourceComponent, MouseEvent.MOUSE_DRAGGED, System.currentTimeMillis(), InputEvent.BUTTON1_DOWN_MASK, sourcePoint.x, sourcePoint.y, 1, false, MouseEvent.BUTTON1);
+        sourceComponent.getTransferHandler().exportAsDrag(sourceComponent, e, TransferHandler.COPY);
+    }
+
+    public static void simulateDrop(final JComponent targetComponent, final Point targetPoint) {
+        try {
+            if (transferable == null) {
+                throw new IllegalStateException("Nothing to drop!");
+            }
+
+            SwingUtilities.invokeAndWait(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        DropTarget dropTarget = targetComponent.getDropTarget();
+                        DropTargetContext dropTargetContext = mock(DropTargetContext.class);
+                        Class<DropTargetContext> dropTargetContextClass = DropTargetContext.class;
+
+                        when(dropTargetContext.getDropTarget()).thenReturn(dropTarget);
+                        when(dropTargetContext.getComponent()).thenReturn(targetComponent);
+
+                        Method getTransferable = dropTargetContextClass.getDeclaredMethod("getTransferable");
+                        getTransferable.setAccessible(true);
+                        when(getTransferable.invoke(dropTargetContext)).thenReturn(transferable);
+
+                        Method getCurrentDataFlavors = dropTargetContextClass.getDeclaredMethod("getCurrentDataFlavors");
+                        getCurrentDataFlavors.setAccessible(true);
+                        when(getCurrentDataFlavors.invoke(dropTargetContext)).thenReturn(transferable.getTransferDataFlavors());
+
+                        dropTarget.dragEnter(new DropTargetDragEvent(dropTargetContext, targetPoint, DnDConstants.ACTION_COPY, DnDConstants.ACTION_COPY_OR_MOVE));
+                        dropTarget.drop(new DropTargetDropEvent(dropTargetContext, targetPoint, DnDConstants.ACTION_COPY, DnDConstants.ACTION_COPY_OR_MOVE));
+                    } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
+                        throw new RuntimeException(e);
+                    }
+                }
+            });
+        } catch (InterruptedException | InvocationTargetException e) {
+            throw new RuntimeException(e);
+        } finally {
+            transferable = null;
+            SunDragSourceContextPeer.setDragDropInProgress(false);
+        }
+    }
+
+    public static Point scrollToPathInJTree(Robot robot, JTreeFixture srcTree, String sourcePath) {
+        try {
+            JTreeDriver driver = new JTreeDriver(robot);
+            Method scrollToPathMethod = JTreeDriver.class.getDeclaredMethod("scrollToPath", new Class[]{JTree.class, String.class});
+            scrollToPathMethod.setAccessible(true);
+            Point result = (Point) scrollToPathMethod.invoke(driver, srcTree.component(), sourcePath);
+            return result;
+        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public static class MyDragSourceContextPeer implements DragSourceContextPeer {
+
+        private Cursor cursor;
+
+        @Override
+        public void startDrag(DragSourceContext dsc, Cursor c, Image dragImage, Point imageOffset) throws InvalidDnDOperationException {
+            transferable = dsc.getTransferable();
+        }
+
+        @Override
+        public Cursor getCursor() {
+            return cursor;
+        }
+
+        @Override
+        public void setCursor(Cursor c) throws InvalidDnDOperationException {
+            cursor = c;
+        }
+
+        @Override
+        public void transferablesFlavorsChanged() {
+        }
+    }
+}
Index: scomm/src/test/scala/edu/zsd/scomm/useractions/CopyUserActions.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/useractions/CopyUserActions.scala	(revision )
+++ scomm/src/test/scala/edu/zsd/scomm/useractions/CopyUserActions.scala	(revision )
@@ -0,0 +1,30 @@
+package edu.zsd.scomm.useractions
+
+import edu.zsd.festlogging.GUITestBean
+import edu.zsd.scomm.adapters.CopyAdapter
+import edu.zsd.scomm.FESTTest._
+import java.awt.event.KeyEvent
+
+@GUITestBean
+class CopyUserActions {
+
+  def copySelection(expectedDestination: String) {
+    val copyAdapter = new CopyAdapter
+    copyAdapter.requirePanelNotVisible()
+    copyAdapter.clickCopy()
+    copyAdapter.requirePanelVisible()
+    copyAdapter.clickOkButton()
+    copyAdapter.waitForPanelToDisappear()
+  }
+
+  def copyWithDragAndDrop(source: Int) {
+
+    robot.pressKey(KeyEvent.VK_CONTROL)
+    try {
+      directoriesPane.directoriesPaneAdapter.right.drag(source)
+      directoriesPane.directoriesPaneAdapter.left.drop()
+    } finally {
+      robot.releaseKey(KeyEvent.VK_CONTROL)
+    }
+  }
+}
Index: scomm/src/test/scala/edu/zsd/scomm/itcases/CopyITCase.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/itcases/CopyITCase.scala	(revision )
+++ scomm/src/test/scala/edu/zsd/scomm/itcases/CopyITCase.scala	(revision )
@@ -0,0 +1,56 @@
+package edu.zsd.scomm.itcases
+
+import org.fest.swing.annotation.GUITest
+import org.junit.Test
+import edu.zsd.scomm.FESTTest._
+import org.junit.Assert._
+import java.nio.file.{Path, Files}
+
+
+@GUITest
+class CopyITCase extends BaseScommITCase {
+
+  @Test
+  def copySelection() {
+
+    directoriesPane.left.enterDirectory("troll")
+    directoriesPane.right.enterDirectory("zombie")
+    directoriesPane.right.selectRange("zombies", "here")
+
+    val trollPath = testDir.resolve("troll")
+    operations.copy.copySelection(trollPath.toString)
+
+    directoriesPane.left.requireContents("..", "zombies", "here")
+
+    val zombiesPath: Path = trollPath.resolve("zombies")
+    assertTrue(Files.exists(zombiesPath))
+    assertTrue(Files.isDirectory(zombiesPath))
+
+    val herePath: Path = trollPath.resolve("here")
+    assertTrue(Files.exists(herePath))
+    assertTrue(Files.isRegularFile(herePath))
+
+    Files.delete(zombiesPath)
+    Files.delete(herePath)
+    mainWindow.refresh()
+  }
+
+  @Test
+  def dragAndDropSelection() {
+    directoriesPane.left.enterDirectory("troll")
+    directoriesPane.right.enterDirectory("zombie")
+
+    val trollPath = testDir.resolve("troll")
+    operations.copy.copyWithDragAndDrop(2)
+
+    directoriesPane.left.requireContents("..", "zombies")
+
+    val zombiesPath: Path = trollPath.resolve("zombies")
+    assertTrue(Files.exists(zombiesPath))
+    assertTrue(Files.isDirectory(zombiesPath))
+
+    Files.delete(zombiesPath)
+    mainWindow.refresh()
+  }
+
+}
Index: scomm/src/test/scala/edu/zsd/scomm/adapters/DirectoriesPaneAdapter.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/adapters/DirectoriesPaneAdapter.scala	(revision )
+++ scomm/src/test/scala/edu/zsd/scomm/adapters/DirectoriesPaneAdapter.scala	(revision )
@@ -0,0 +1,11 @@
+package edu.zsd.scomm.adapters
+
+import edu.zsd.festlogging.GUITestBean
+
+@GUITestBean
+class DirectoriesPaneAdapter {
+
+  val left = new DirectoryListAdapter("directoriesPane.left")
+  val right = new DirectoryListAdapter("directoriesPane.right")
+
+}
Index: scomm/src/test/scala/edu/zsd/scomm/adapters/DirectoryListAdapter.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/adapters/DirectoryListAdapter.scala	(date 1402327531000)
+++ scomm/src/test/scala/edu/zsd/scomm/adapters/DirectoryListAdapter.scala	(revision )
@@ -4,8 +4,11 @@
 import edu.zsd.scomm.FESTTest._
 import org.junit.Assert._
 import edu.zsd.festlogging.{ExecuteInEDT, GUITestBean}
-import java.awt.Color
+import java.awt.{Dimension, Point, Color}
 import javax.swing.SwingUtilities._
+import edu.zsd.festlogging.dnd.SimulatedDnD
+import javax.swing.JComponent
+import org.fest.swing.timing.Pause
 
 @GUITestBean
 case class DirectoryListAdapter(componentName: String) {
@@ -33,6 +36,27 @@
   def requireCurrentDirBackground(color: Color): Unit = {
     assertTrue(isEventDispatchThread)
     assertEquals(color, currentDirPanel.component().getBackground)
+  }
+
+  def drag(index: Int) {
+
+    if (SimulatedDnD.enabled) {
+      list.item(index).select()
+      SimulatedDnD.simulateDrag(list.component().asInstanceOf[JComponent], new Point)
+    } else {
+      list.drag(index)
+    }
+  }
+
+  def drop() {
+    if (SimulatedDnD.enabled) {
+      val size: Dimension = list.component().getSize
+      //      SimulatedDnD.simulateDrop(list.component().asInstanceOf[JComponent], new Point(size.getWidth.asInstanceOf[Int] - 5, size.getHeight.asInstanceOf[Int] - 5))
+      SimulatedDnD.simulateDrop(list.component().asInstanceOf[JComponent], new Point(100, 100))
+      Pause.pause(1000)
+    } else {
+      list.drop()
+    }
   }
 
   override def toString: String = componentName
Index: fest-logging/src/main/scala/edu/zsd/festlogging/CacioFESTLoggingRunner.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- fest-logging/src/main/scala/edu/zsd/festlogging/CacioFESTLoggingRunner.scala	(date 1402327531000)
+++ fest-logging/src/main/scala/edu/zsd/festlogging/CacioFESTLoggingRunner.scala	(revision )
@@ -1,20 +1,24 @@
 package edu.zsd.festlogging
 
-import net.java.openjdk.cacio.ctc.{CTCGraphicsEnvironment, CTCToolkit}
+import net.java.openjdk.cacio.ctc.CTCGraphicsEnvironment
 import javax.swing.plaf.metal.MetalLookAndFeel
 import org.junit.runners.BlockJUnit4ClassRunner
 import org.junit.runners.model.{Statement, FrameworkMethod}
+import edu.zsd.festlogging.dnd.{SimulatedDndCTCToolkit, SimulatedDnD}
 
 class CacioFESTLoggingRunner(clazz: Class[_]) extends BlockJUnit4ClassRunner(clazz) {
 
   val disabled = System.getProperty("cacio.disabled4testing", "false").toBoolean
 
   if (!disabled) {
-    System.setProperty("awt.toolkit", classOf[CTCToolkit].getName)
+    SimulatedDnD.enabled = true
+    System.setProperty("awt.toolkit", classOf[SimulatedDndCTCToolkit].getName)
     System.setProperty("java.awt.graphicsenv", classOf[CTCGraphicsEnvironment].getName)
     System.setProperty("swing.defaultlaf", classOf[MetalLookAndFeel].getName)
     System.setProperty("swing.systemlaf", classOf[MetalLookAndFeel].getName)
     System.setProperty("java.awt.headless", "false")
+  } else {
+    SimulatedDnD.enabled = false
   }
 
   override def methodBlock(frameworkMethod: FrameworkMethod): Statement = {
Index: scomm/src/main/scala/edu/zsd/scomm/view/MainWindowView.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/main/scala/edu/zsd/scomm/view/MainWindowView.scala	(date 1402327531000)
+++ scomm/src/main/scala/edu/zsd/scomm/view/MainWindowView.scala	(revision )
@@ -42,6 +42,7 @@
     contents += editButton
 
     val copyButton = new EventButton("Copy")
+    copyButton.name = "copyButton"
     contents += copyButton
 
     val moveButton = new EventButton("Move")
@@ -59,6 +60,7 @@
     contents += infoButton
 
     val refreshButton = new EventButton("Refresh")
+    refreshButton.name = "refreshButton"
     contents += refreshButton
   }
 
Index: scomm/src/test/scala/edu/zsd/scomm/useractions/DirectoryListUserActions.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/useractions/DirectoryListUserActions.scala	(date 1402327531000)
+++ scomm/src/test/scala/edu/zsd/scomm/useractions/DirectoryListUserActions.scala	(revision )
@@ -8,10 +8,8 @@
 import java.nio.file.Path
 
 @GUITestBean
-case class DirectoryListUserActions(componentName: String) {
+case class DirectoryListUserActions(directoryListAdapter: DirectoryListAdapter) {
 
-  private[this] val directoryListAdapter = new DirectoryListAdapter(componentName)
-
   def currentDir = directoryListAdapter.currentDir
 
   def requireCurrentDir(currentDir: String): Unit = directoryListAdapter.requireCurrentDir(currentDir)
@@ -46,7 +44,4 @@
   def requireActive() = directoryListAdapter.requireCurrentDirBackground(Color.BLUE)
 
   def requireInactive() = directoryListAdapter.requireCurrentDirBackground(Color.LIGHT_GRAY)
-
-
-  override def toString: String = componentName
 }
Index: scomm/src/test/scala/edu/zsd/scomm/adapters/NewFolderAdapter.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/adapters/NewFolderAdapter.scala	(date 1402327531000)
+++ scomm/src/test/scala/edu/zsd/scomm/adapters/NewFolderAdapter.scala	(revision )
@@ -3,10 +3,6 @@
 import edu.zsd.festlogging.{GUITestAction, GUITestBean}
 import org.fest.swing.fixture.{JPanelFixture, JButtonFixture, JTextComponentFixture, JLabelFixture}
 import edu.zsd.scomm.FESTTest._
-import org.fest.swing.core.ComponentMatcher
-import java.awt.Component
-import edu.zsd.scomm.operations.newfolder.NewFolderPanel
-import javax.swing.JPanel
 import org.fest.swing.exception.ComponentLookupException
 
 
@@ -48,7 +44,5 @@
   @GUITestAction
   def enterFolderName(folderName: String): Unit = components.folderName.setText(folderName)
 
-  private def findPanel = new JPanelFixture(robot, robot.finder().find(new ComponentMatcher {
-    override def matches(c: Component): Boolean = c.getClass == classOf[NewFolderPanel] && c.getName == "newFolderButton"
-  }).asInstanceOf[JPanel])
+  private def findPanel = new JPanelFixture(robot, "newFolder")
 }
Index: scomm/src/main/scala/edu/zsd/scomm/operations/copymove/CopyMovePanel.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/main/scala/edu/zsd/scomm/operations/copymove/CopyMovePanel.scala	(date 1402327531000)
+++ scomm/src/main/scala/edu/zsd/scomm/operations/copymove/CopyMovePanel.scala	(revision )
@@ -17,11 +17,15 @@
   val actionNameCapital: String // u.i. "Copy" or "Move"
 
   private val promptLabel = new Label("")
+  promptLabel.name = "copyMovePanel.prompt"
   private val destinationTextField = new TextField("")
   destinationTextField.preferredSize = new Dimension(200, 20)
   destinationTextField.horizontalAlignment = Alignment.Left
+  destinationTextField.name = "copyMovePanel.destination"
   val okButton = new EventButton("OK")
+  okButton.name = "copyMovePanel.ok"
   val cancelButton = new EventButton("Cancel")
+  cancelButton.name = "copyMovePanel.cancel"
 
   contents ++= Seq(promptLabel, destinationTextField, okButton, cancelButton)
 
@@ -53,10 +57,12 @@
 class CopyPanel @Autowired()(model: CopyMoveModel) extends CopyMovePanel(model) {
   override val actionName: String = "copy"
   override val actionNameCapital: String = "Copy"
+  name = "copyPanel"
 }
 
 @Component
 class MovePanel @Autowired()(model: CopyMoveModel) extends CopyMovePanel(model) {
   override val actionName: String = "move"
   override val actionNameCapital: String = "Move"
+  name = "movePanel"
 }
Index: scomm/src/test/scala/edu/zsd/scomm/adapters/MainWindowAdapter.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/adapters/MainWindowAdapter.scala	(date 1402327531000)
+++ scomm/src/test/scala/edu/zsd/scomm/adapters/MainWindowAdapter.scala	(revision )
@@ -9,8 +9,10 @@
 @GUITestBean
 class MainWindowAdapter {
 
-  private[this] val infoButton = new JButtonFixture(robot, "infoButton")
+  private val infoButton = new JButtonFixture(robot, "infoButton")
 
+  private val refreshButton = new JButtonFixture(robot, "refreshButton")
+
   @ExecuteInEDT
   def isInfoButtonEnabled: Boolean = {
     assertTrue(isEventDispatchThread)
@@ -24,5 +26,10 @@
   @GUITestAction
   def clickInfoButton() = {
     infoButton.click()
+  }
+
+  @GUITestAction
+  def clickRefreshButton() = {
+    refreshButton.click()
   }
 }
Index: fest-logging/src/main/scala/edu/zsd/festlogging/MethodCallStack.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- fest-logging/src/main/scala/edu/zsd/festlogging/MethodCallStack.scala	(date 1402327531000)
+++ fest-logging/src/main/scala/edu/zsd/festlogging/MethodCallStack.scala	(revision )
@@ -21,9 +21,12 @@
   } ensuring (current != None)
 
   def enterTestMethod(joinPoint: JoinPoint): Unit = {
-    val currentRunningExecution = current.get
+    current match {
+      case Some(currentRunningExecution) =>
-    current = Some(new RunningTestMethodExecution(joinPoint, currentRunningExecution))
+        current = Some(new RunningTestMethodExecution(joinPoint, currentRunningExecution))
+      case None => // ignore
-  }
+    }
+  }
 
   def exitTestMethod(joinPoint: JoinPoint, result: AnyRef): Unit = {
     val res = if (obtainReturnType(joinPoint) != classOf[Unit]) ReturnResult(result) else EmptyResult()
@@ -35,15 +38,18 @@
   }
 
   private[this] def exitTestMethod(joinPoint: JoinPoint, result: Result): Unit = {
-    val currentRunningExecution = current.get
+    current match {
+      case Some(currentRunningExecution) =>
-    currentRunningExecution match {
-      case runningTestMethodExecution: RunningTestMethodExecution =>
-        assert(runningTestMethodExecution.joinPoint == joinPoint)
-        val args: Array[AnyRef] = if (joinPoint.getArgs != null) joinPoint.getArgs else Array.empty
-        val currentExecution = createExecution(runningTestMethodExecution, args, result)
-        val parentRunningExecution: RunningExecution = runningTestMethodExecution.parentRunningExecution
-        parentRunningExecution.invocations :+= currentExecution
-        current = Some(parentRunningExecution)
+        currentRunningExecution match {
+          case runningTestMethodExecution: RunningTestMethodExecution =>
+            assert(runningTestMethodExecution.joinPoint == joinPoint)
+            val args: Array[AnyRef] = if (joinPoint.getArgs != null) joinPoint.getArgs else Array.empty
+            val currentExecution = createExecution(runningTestMethodExecution, args, result)
+            val parentRunningExecution: RunningExecution = runningTestMethodExecution.parentRunningExecution
+            parentRunningExecution.invocations :+= currentExecution
+            current = Some(parentRunningExecution)
+        }
+      case None => // ignore
     }
   }
 
Index: scomm/src/test/scala/edu/zsd/scomm/useractions/MainWindowUserActions.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/useractions/MainWindowUserActions.scala	(date 1402327531000)
+++ scomm/src/test/scala/edu/zsd/scomm/useractions/MainWindowUserActions.scala	(revision )
@@ -30,6 +30,9 @@
     } else {
       fail("View button should be enabled at this point")
     }
+  }
 
+  def refresh() {
+    mainWindowAdapter.clickRefreshButton()
   }
 }
Index: fest-logging/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- fest-logging/pom.xml	(date 1402327531000)
+++ fest-logging/pom.xml	(revision )
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0"
-         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xmlns="http://maven.apache.org/POM/4.0.0"
          xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <parent>
         <artifactId>workspace</artifactId>
@@ -10,6 +10,20 @@
     <modelVersion>4.0.0</modelVersion>
 
     <artifactId>fest-logging</artifactId>
+
+    <dependencies>
+        <dependency>
+            <groupId>com.typesafe.scala-logging</groupId>
+            <artifactId>scala-logging-slf4j_2.10</artifactId>
+            <version>2.1.2</version>
+        </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-all</artifactId>
+            <version>1.9.5</version>
+        </dependency>
+
+    </dependencies>
 
     <build>
         <plugins>
\ No newline at end of file
Index: scomm/src/test/scala/edu/zsd/scomm/FESTTest.scala
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- scomm/src/test/scala/edu/zsd/scomm/FESTTest.scala	(date 1402327531000)
+++ scomm/src/test/scala/edu/zsd/scomm/FESTTest.scala	(revision )
@@ -4,7 +4,7 @@
 import org.fest.swing.finder.WindowFinder
 import java.awt.Frame
 import java.io.File
-import edu.zsd.scomm.useractions.{NewFolderUserActions, MainWindowUserActions, DirectoryListUserActions}
+import edu.zsd.scomm.useractions._
 import java.nio.file.{DirectoryStream, Files, Path}
 import scala.collection.JavaConverters._
 
@@ -26,14 +26,11 @@
   val mainWindow = new MainWindowUserActions
 
   // test components
-  val directoriesPane = new {
-    val left = new DirectoryListUserActions("directoriesPane.left")
-    val right = new DirectoryListUserActions("directoriesPane.right")
-    val directoryLists = Seq(left, right)
-  }
+  val directoriesPane = new DirectoriesPaneUserActions
 
   val operations = new {
     val newFolder = new NewFolderUserActions
+    val copy = new CopyUserActions
   }
 
   private def deleteEmptyDirectoryPlaceholders(dir: Path) {
